name: Build

on:
  push:
    branches: [main]
    tags:
      - v*.*.*
  pull_request:
    branches: '*'

env:
  CACHE_EPOCH: 1

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILDING_IN_CI: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup pip (base)
        run: python3 -m pip install --user -U pip setuptools wheel
      - name: Cache (pip)
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-
      - name: Setup pip (build)
        run: python3 -m pip install -r requirements-build.txt
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Cache (node_modules)
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules/
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
      - name: Cache (.yarn-packages)
        uses: actions/cache@v2
        id: cache-yarn-packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        with:
          path: .yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-packages-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-packages-
      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: doit setup:js
      - name: Build (js)
        run: doit -n4 build:js* || doit build:js*
      - name: Build (py)
        run: doit -n4 build:py*
      - name: Dist
        run: doit dist
      - name: Upload (dist)
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlite dist ${{ github.run_number }}
          path: ./dist

  lint-js-test:
    runs-on: ubuntu-latest
    env:
      LINTING_IN_CI: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup pip (base)
        run: python3 -m pip install --user -U pip setuptools wheel
      - name: Cache (pip)
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-
      - name: Setup pip (lint)
        run: python3 -m pip install -r requirements-lint.txt
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Cache (node_modules)
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules/
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
      - name: Cache (.yarn-packages)
        uses: actions/cache@v2
        id: cache-yarn-packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        with:
          path: .yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-packages-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-packages-
      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: doit setup:js
      - name: Test (js)
        run: doit -n4 test:js
      - name: Lint
        run: doit lint
      - name: Docs (typedoc)
        run: doit -n4 docs:typedoc:mystify
      - name: Upload (typedoc)
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlite typedoc ${{ github.run_number }}
          path: ./docs/api/ts

  test:
    needs: [build]
    runs-on: ${{ matrix.os }}-latest
    env:
      TESTING_IN_CI: 1
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        include:
          - os: ubuntu
            pip-cache: ~/.cache/pip
          - os: macos
            pip-cache: ~/Library/Caches/pip
          - os: windows
            pip-cache: ~\AppData\Local\pip\Cache
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup pip (base)
        run: python3 -m pip install --user -U pip setuptools wheel
      - name: Download (dist)
        uses: actions/download-artifact@v2
        with:
          name: jupyterlite dist ${{ github.run_number }}
          path: ./dist
      - name: Cache (pip)
        uses: actions/cache@v2
        with:
          path: ${{ matrix.pip-cache }}
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-
      - name: Install (py)
        run: |
          python3 -m pip install entrypoints doit jupyter_core
          python3 -m pip install --find-links dist --no-index jupyterlite
          python3 -m pip check
      - name: Prepare smoke test folder
        shell: bash
        run: mkdir -p build/smoke-test
      - name: Get SOURCE_DATE_EPOCH
        id: source-date
        run: |
          echo "::set-output name=epoch::$(git log -1 --format=%ct)"
      - name: Test (CLI)
        run: |
          cd build/smoke-test
          jupyter lite --version || exit 1
          jupyter lite --help || exit 1
          jupyter lite list || exit 1
          jupyter lite status || exit 1
          jupyter lite build || exit 1
          jupyter lite check || exit 1
          jupyter lite archive --source-date-epoch ${{ steps.source-date.outputs.epoch }} || exit 1
          jupyter lite list || exit 1
          jupyter lite status --debug || exit 1
      - name: Setup pip (test)
        run: python3 -m pip install -r requirements-test.txt
      - name: Test (py)
        run: doit test:py:*
      - name: Upload (reports)
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlite reports ${{ github.run_number }} ${{ matrix.os }}
          path: |
            build/htmlcov
            build/pytest

  docs:
    needs: [build, lint-js-test]
    runs-on: ubuntu-latest
    env:
      DOCS_IN_CI: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download (dist)
        uses: actions/download-artifact@v2
        with:
          name: jupyterlite dist ${{ github.run_number }}
          path: ./dist
      - name: Download (typedoc)
        uses: actions/download-artifact@v2
        with:
          name: jupyterlite typedoc ${{ github.run_number }}
          path: ./docs/api/ts
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup pip (base)
        run: python3 -m pip install --user -U pip setuptools wheel
      - name: Cache (pip)
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-
      - name: Cache (docs extensions)
        uses: actions/cache@v2
        with:
          path: ./examples/.cache
          key: |
            ${{ env.CACHE_EPOCH }}-docs-app-${{ hashFiles('examples/jupyter_lite_config.json') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-docs-app-
      - name: Setup pip (docs)
        run: python3 -m pip install -r requirements-docs.txt
      - name: Install (py)
        run: doit dev:py:jupyterlite
      - name: Docs (app)
        run: doit docs:app:build
      - name: Docs (app archive)
        run: doit docs:app:pack
      - name: Upload (docs app archive)
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlite docs archive ${{ github.run_number }}
          path: |
            build/docs-app/jupyterlite-docs-*.tgz
      - name: Docs (sphinx)
        run: doit docs:sphinx
      - name: Check Built Artifacts
        run: doit check
      - name: Upload (sphinx logs)
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlite sphinx logs ${{ github.run_number }}
          if-no-files-found: ignore
          path: /tmp/sphinx-*.log

  release:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download (dist)
        uses: actions/download-artifact@v2
        with:
          name: jupyterlite dist ${{ github.run_number }}
          path: ./dist
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
